name: Flutter CI
env:
  RELEASE_KEY_B64: ${{ secrets.RELEASE_KEY_B64 }}
  KEY_ALIAS:  ${{ secrets.KEY_ALIAS }}
  KEY_PASS:  ${{ secrets.KEY_PASS }}
  KEY_STORE_PASS:  ${{ secrets.KEY_STORE_PASS }}
# This workflow is triggered on pushes to the repository.	
# https://docs.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables
on:	
  push:	
    branches:	
    - master	

# on: push    # Default will running for every branch.	

jobs:	
  check:
    # This job will run on ubuntu virtual machine	
    runs-on: ubuntu-latest	
    steps:	

    # Setup Java environment in order to build the Android app.	
    - uses: actions/checkout@v1	
    - uses: actions/setup-java@v1	
      with:	
        java-version: '12.x'	
    - run: echo $RELEASE_KEY_B64 | base64 -d > android/app/key.jks
    #- run: mkdir -p  build/app/outputs/release
    - run: pwd
    - run: ls android/app/
    - run: ls -a

      # Setup the flutter environment.
    - uses: subosito/flutter-action@v1
      with:
        channel: 'stable' # 'dev', 'alpha', default to: 'stable'
        flutter-version: 1.20.0
        # flutter-version: '1.12.x' # you can also specify exact version of flutter
      # Get flutter dependencies.
    - run: flutter pub get
      # Check for any formatting issues in the code.
    - run: flutter format .
      # Statically analyze the Dart code for any errors.
      # - run: flutter analyze .	#Also exit if has info after analyze, so this reason to off this
      # Run widget tests for our flutter project.
    - run: flutter test
    - run: ls android/app/
    - run: pwd

    - run: flutter build apk --release
      env:
        KEY_PATH: key.jks

      # Upload generated apk to the artifacts.
    - uses: actions/upload-artifact@v2
      with:
        name: release-apk
        path: build/app/outputs/flutter-apk/app-release.apk

  #  - name: Create a Release APK
  #  - uses: ncipollo/release-action@v1
  #    with:
  #      artifacts: "build/app/outputs/apk/release/*.apk"
  #      token: ${{ secrets.TOKEN }}


      # - run: echo -e "storePassword=$KEY_STORE_PASS\nkeyPassword=$KEY_PASS\nkeyAlias=$KEY_ALIAS\nstoreFile=/home/runner/work/supervisor_report/supervisor_report/android/key.jks" > /home/runner/work/supervisor_report/supervisor_report/android/key.properties
      # - run: echo "$RELEASE_KEY_B64" | base64 -d > /home/runner/work/supervisor_report/supervisor_report/android/key.jks
      # - run: echo "$RELEASE_KEY_B64" | base64 -d > ./secrets.properties

 # build:
 #   # This job will run on ubuntu virtual machine
 #   needs: [check]
 #   runs-on: [ubuntu-latest]
 #   steps:
 #
 #   - uses: r0adkll/sign-android-release@v1
 #     with:
 #       releaseDirectory: release/
 #       signingKeyBase64: ${{ secrets.RELEASE_KEY_B64 }}
 #       alias: ${{ secrets.KEY_ALIAS }}
 #       keyStorePassword: ${{ secrets.KEY_PASS }}
 #       keyPassword: ${{ secrets.KEY_STORE_PASS }}
 #
 #
 # artifact:
 #   # This job will run on ubuntu virtual machine
 #   needs: [build]
 #   runs-on: [ubuntu-latest]
 #   steps:
 #
 #   - uses: actions/upload-artifact@v1
 #     with:
 #       name: release-apk
 #       path: build/app/outputs/apk/release/app-release.apk
 #     # Upload generated apk to the artifacts.
 #